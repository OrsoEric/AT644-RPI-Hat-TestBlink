/****************************************************************************
**	ORANGEBOT PROJECT
*****************************************************************************
**	MODULE TESTING
*****************************************************************************
**	Author: 			Orso Eric
**	Creation Date:
**	Last Edit Date:
**	Revision:			1
**	Version:			0.1 ALPHA
****************************************************************************/

/****************************************************************************
**	HYSTORY VERSION
*****************************************************************************
**	R1 V0.1ALPHA
**		>
****************************************************************************/

/****************************************************************************
**	DESCRIPTION
*****************************************************************************
**	This project is meant to test the AT324 Module
**	>Test LCD display
**	>Test USART0 (57Kbs) with loopback
****************************************************************************/

/****************************************************************************
**	USED PIN
**	TIPS: compile this field before writing any code: it really helps!
*****************************************************************************
**
****************************************************************************/

/****************************************************************************
**	USED PHERIPERALS
**	TIPS: compile this field before writing any code: it really helps!
*****************************************************************************
**
****************************************************************************/

/****************************************************************************
**	KNOWN BUG
*****************************************************************************
**	>
****************************************************************************/

/****************************************************************************
**	TODO
*****************************************************************************
**
****************************************************************************/

/****************************************************************************
**	ENVROIMENT VARIABILE
****************************************************************************/

/****************************************************************************
**	INCLUDE
**	TIPS: ".h" should not include other ".h", it lower the leggibility of the code
**	TIPS: ".h" must not contain anything that generate code, write only declaration or prototype
**	this help the leggibility and the debug phase
**	TIPS: type from the stdint.h have a well defined width and signedness, use them
**	( uint8_t = unsigned 8 bit, int8_t = signed 8 bit, uint32_t = unsiged 32 bit, ecc... )
****************************************************************************/

#include "global.h"

/****************************************************************************
**	DEFINE
****************************************************************************/

//define for the mail loop
#define EVER (;;)

/****************************************************************************
**	MACRO
****************************************************************************/

/****************************************************************************
**	STRUCTURE
****************************************************************************/

/****************************************************************************
**	PROTOTYPE: FUNCTION
**	TIPS: use "extern" in function prototype, it's not necessary, but any other
**	prototype need it, it help the leggibility of the code
****************************************************************************/

/****************************************************************************
**	PROTOTYPE: GLOBAL VARIABILE
****************************************************************************/

/****************************************************************************
**	GLOBAL VARIABILE:
**	TIPS: "const" variabile will be loaded in the flash memory, saving the ram,
**	use it for string that will not be modified
**	TIPS: if you want a ISR to manipulate a global variabile, than that variabile
**	**must** be declared "volatile" so that the c compiler will not wipe out the
**	variabile by optimising the code, use that variabile as less as possibile
**	because it will not be optimised
**	TIPS: "volatile int" variabile may give problem, don't use it (uP is 8 bits, while
**	int is 16 bits, it's implemented by concatenating 2 byte, the volatile statement
**	disable the optimisation on that variabile, and mess up that code)
****************************************************************************/

//Volatile flags used by ISRs
volatile Isr_flags flags;

///----------------------------------------------------------------------
///	BUFFERS
///----------------------------------------------------------------------
//	Buffers structure and data vectors

/****************************************************************************
**	MAIN
****************************************************************************/

int main( void )
{
	///----------------------------------------------------------------------
	///	LOCAL VARS
	///----------------------------------------------------------------------
	
	//prescaler
	U8 pre = 0;

	///----------------------------------------------------------------------
	///	VARS INIT
	///----------------------------------------------------------------------

	///----------------------------------------------------------------------
	///	DEVS INIT
	///----------------------------------------------------------------------

	//Init all pins, init all devices
	global_init();

	///----------------------------------------------------------------------
	///	MAIN LOOP
	///----------------------------------------------------------------------

	//Main Loop
	for EVER
	{

		///----------------------------------------------------------------------
		///	100mS Tick
		///----------------------------------------------------------------------

		//If: tick
		if (flags.led_update == 1)
		{
			TOGGLE_BIT( PORTB, PB7 );
			//Clear flag
			flags.led_update = 0;
			//advance prescaler (10 counts then reset)
			pre = (pre <= (10-1))?(pre +1):(0);
			//when prescaler is reset (1s)
			if (pre == 0)
			{
				//Toggle leds
				TOGGLE_BIT( PORTB, PB6 );
			}
		}	//Endif: 100mS tick

	}	//end for: for EVER

	return 0;
}	//end main

/****************************************************************************
** FUNCTIONS:
****************************************************************************/
